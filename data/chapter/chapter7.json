{
    "title": "第7章: 配列とオブジェクトの操作",
    "description": [
        {
            "type": "p",
            "text": "JavaScriptの配列とオブジェクトは、データを管理するための基本的なデータ構造です。この章では、それらの基本操作や、いつどのように使うべきかを学びます。"
        }
    ],
    "sections": [
        {
            "title": "1. 配列の基本操作",
            "content": [
                {
                    "type": "p",
                    "paragraphs": [
                        "配列は複数のデータを1つの変数に格納できるデータ構造です。配列の要素には、インデックスを使ってアクセスできます。"
                    ]
                },
                {
                    "type": "code",
                    "language": "javascript",
                    "content": "let numbers = [1, 2, 3, 4];\nlet squaredNumbers = numbers.map(function(num) {\n     return num * num; \n});\nconsole.log(squaredNumbers);  // [1, 4, 9, 16]\nlet evenNumbers = numbers.filter(function(num) {\n     return num % 2 === 0; \n});\nconsole.log(evenNumbers);  // [2, 4]"
                },
                {
                    "type":"p",
                    "paragraphs":[""],
                    "attributes":{
                        "boldtext":"配列の操作（push、pop、shift、unshift）"
                    }
                },
                {
                    "type": "p",
                    "paragraphs": [
                        "配列に新しい要素を追加したり、既存の要素を削除する操作は非常に一般的です。"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        {
                            "text": "push()",
                            "details":"配列の末尾に新しい要素を追加"
                        },
                        {
                            "text": "pop()",
                            "details":"配列の末尾から要素を削除"
                        },
                        {
                            "text": "shift()",
                            "details":"配列の最初の要素を削除"
                        },
                        {
                            "text": "unshift()",
                            "details":"配列の最初に新しい要素を追加"
                        }
                    ],
                    "ordered": false
                },
                {
                    "type": "code",
                    "language": "javascript",
                    "content": "let fruits = ['りんご', 'バナナ', 'オレンジ'];\nfruits.push('ぶどう');    // 'ぶどう'を追加\nconsole.log(fruits);      // ['りんご', 'バナナ', 'オレンジ', 'ぶどう']\nfruits.pop();            // 最後の要素を削除\nconsole.log(fruits);      // ['りんご', 'バナナ', 'オレンジ']"
                },
                {
                    "type":"p",
                    "paragraphs":[""],
                    "attributes":{
                        "boldtext":"map()やfilter()の活用"
                    }
                },
                {
                    "type": "p",
                    "paragraphs": [
                        "配列を操作する際に、map()やfilter()といったメソッドを使うことで、要素を効率的に操作することができます。"
                    ]
                },
                {
                    "type": "code",
                    "language": "javascript",
                    "content": "let numbers = [1, 2, 3, 4];\nlet squaredNumbers = numbers.map(function(num) {\n     return num * num; \n});\nconsole.log(squaredNumbers);  // [1, 4, 9, 16]\nlet evenNumbers = numbers.filter(function(num) {\n     return num % 2 === 0; \n});\nconsole.log(evenNumbers);  // [2, 4]"
                }
            ],
            "id": 1
        },
        {
            "title": "2. オブジェクトの基本操作",
            "content": [
                {
                    "type": "p",
                    "paragraphs": [
                        "オブジェクトは、キーと値のペアを持つデータ構造です。キーは一意で、値にはどんなデータ型でも格納できます。"
                    ]
                },

                {
                    "type": "code",
                    "language": "javascript",
                    "content": "let person = {\n    name: 'Alice',\n    age: 25,\n    city: 'Tokyo'\n};\n\nconsole.log(person.name);  // 'Alice'が出力されます"
                },
                {
                    "type":"p",
                    "paragraphs":[""],
                    "attributes":{
                        "boldtext":"オブジェクトの操作（追加、削除、更新）"
                    }
                },
                {
                    "type":"p",
                    "paragraphs":["オブジェクトのプロパティは簡単に追加、削除、更新することができます。以下にその例を示します。"]
                },
                {
                    "type": "code",
                    "language": "javascript",
                    "content": "person.age = 26;  // プロパティの更新\nperson.country = 'Japan';  // 新しいプロパティの追加\ndelete person.city;  // プロパティの削除\nconsole.log(person);  // { name: 'Alice', age: 26, country: 'Japan' }"
                }
            ],
            "id": 2
        },
        {
            "title": "3. 配列とオブジェクトの組み合わせ",
            "content": [
                {
                    "type": "p",
                    "paragraphs": [
                        "配列は順序があるデータのリストを扱うのに適しており、オブジェクトは一意のキーを持つデータを扱うのに適しています。例えば、ユーザーの情報を管理する場合、各ユーザーをオブジェクトとして格納し、複数のユーザーを配列でまとめると良いでしょう。"
                    ]
                },
                {
                    "type": "code",
                    "language": "javascript",
                    "content": "let users = [\n    { name: 'Alice', age: 25 },\n    { name: 'Bob', age: 30 },\n    { name: 'Charlie', age: 35 }\n];\nconsole.log(users[1].name);  // 'Bob'が出力されます"
                }
            ],
            "id": 3
        },
        {
            "title": "4. オブジェクトのアクセス方法",
            "content": [
                {
                    "type":"p",
                    "paragraphs":[""],
                    "attributes":{
                        "boldtext":"ドット記法とブラケット記法"
                    }
                },
                {
                    "type": "p",
                    "paragraphs": [
                        "オブジェクトのプロパティにアクセスするためには、ドット記法またはブラケット記法を使用します。次に例を示します。"
                    ]
                },
                {
                    "type": "code",
                    "language": "javascript",
                    "content": "let users = { name: 'Alice', age: 25 };\nconsole.log(users.name);  // ドット記法\nconsole.log(users[\"name\"]);  // ブラケット記法"
                },
                {
                    "type":"p",
                    "paragraphs":[""],
                    "attributes":{
                        "boldtext":"キーと値の取得"
                    }
                },
                {
                    "type":"p",
                    "paragraphs":["オブジェクトのキーや値を取得するためには、Object.keys()やObject.values()を使用します。また、Object.entries()を使うと、キーと値のペアが返ります。"]
                },
                {
                    "type": "code",
                    "language": "javascript",
                    "content": "let users = { name: \n'Alice', \nage: 25, \nnationality: 'Japan' \n};\nconsole.log(Object.keys(users));  // ['name', 'age', 'nationality']\nconsole.log(Object.values(users));  // ['Alice', 25, 'Japan']\nconsole.log(Object.entries(users));"
                },
                {
                    "type":"p",
                    "paragraphs":[""],
                    "attributes":{
                        "boldtext":"オブジェクトのスプレッド演算子"
                    }
                },
                {
                    "type":"p",
                    "paragraphs":["スプレッド演算子を使うと、オブジェクトを簡単にクローンしたり、新しいプロパティを追加できます。"]
                },
                {
                    "type": "code",
                    "language": "javascript",
                    "content": "const obj = { a: 1, b: 2 };\nconst newObj = { ...obj, c: 3 };  // { a: 1, b: 2, c: 3 }"
                },
                {
                    "type":"p",
                    "paragraphs":[""],
                    "attributes":{
                        "boldtext":"オブジェクトの分割代入"
                    }
                },
                {
                    "type":"p",
                    "paragraphs":["プロパティのアクセスを効率化するためには、分割代入を使うことができます。"]
                },
                {
                    "type": "code",
                    "language": "javascript",
                    "content": "const { a, b, c } = { a: 1, b: 2, c: 3 };\nconsole.log(a, b, c);  // 1, 2, 3"
                }
            ],
            "id": 4
        }
    ]
}