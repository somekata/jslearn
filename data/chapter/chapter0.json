{
    "title": "序章: プログラミングの前に",
    "description": [
        {
            "type": "p",
            "paragraphs": [
                "プログラミングを学び始める前に、まずは基本的なパソコン操作や、ファイルの管理方法について理解しておくことが重要です。この序章では、プログラミングに入る前に必要な基礎知識を整理していきます。"
            ]
        }
    ],
    "sections": [
        {
            "title": "1. パソコンの基本操作",
            "content": [
                {
                    "type": "p",
                    "paragraphs": [
                        "プログラミングを始めるには、パソコンの基本的な操作を理解しておく必要があります。例えば、ファイルやフォルダを作成したり、適切な場所に保存する方法などです。"
                    ]
                }
            ],
            "id": 1
        },
        {
            "title": "2. ファイルとフォルダの管理",
            "content": [
                {
                    "type": "p",
                    "paragraphs": [
                        "プログラムを作成する際には、多くのファイルやフォルダを管理する必要があります。各ファイルがどのフォルダに保存されているかを把握することが、効率的な開発につながります。ファイルやフォルダは適切な命名規則に従い、整理することが推奨されます。"
                    ]
                }
            ],
            "id": 2
        },
        {
            "title": "3. ディレクトリ（directory）とパス（path）",
            "content": [
                {
                    "type": "p",
                    "paragraphs": [
                        "ディレクトリは、他のファイルやディレクトリを格納する「フォルダ」のようなものです。パソコンやサーバーのストレージは、階層的な構造になっており、各ディレクトリには複数のファイルやサブディレクトリ（ディレクトリの中にあるディレクトリ）が含まれます。これによって、ファイルを整理して管理することができます。"
                    ]
                },
                {
                    "type": "code",
                    "language": "plaintext",
                    "content": "/home/user/documents/"
                },
                {
                    "type": "p",
                    "paragraphs": [
                        "パス（path）は、ファイルやディレクトリがどこにあるかを示す「住所」のようなものです。パスには2種類あります。",
                        "絶対パスは、システム全体のルートディレクトリ（UNIX系システムでは「/」）から始まる、ファイルやディレクトリへの完全なパスです。絶対パスはどこからでもファイルにアクセスできるように、ルートからの完全な場所を示しています。"
                    ]
                },
                {
                    "type": "code",
                    "language": "plaintext",
                    "content": "/home/user/documents/report.txt"
                },
                {
                    "type": "p",
                    "paragraphs": [
                        "この絶対パスでは、/ から始まり、home ディレクトリ、user ディレクトリ、documents ディレクトリを経由して、report.txt というファイルがあることが示されています。",
                        "相対パスは、現在の作業ディレクトリ（カレントディレクトリ）からの相対的な位置を基にしたパスです。絶対パスとは異なり、特定のディレクトリから見たファイルやディレクトリの場所を示します。"
                    ]
                },
                {
                    "type": "code",
                    "language": "plaintext",
                    "content": "documents/report.txt"
                },
                {
                    "type": "p",
                    "paragraphs": [
                        "これは、現在のディレクトリが「user」である場合に、「documents」フォルダの中の「report.txt」というファイルを指しています。"
                    ]
                },
                {
                    "type": "p",
                    "paragraphs": [
                        "便利な記号："
                    ],
                    "attributes": {
                        "class": "left"
                    }
                },
                {
                    "type": "list",
                    "items": [
                        ".（ピリオド）：現在のディレクトリを指します。",
                        "..（ドット2つ）：1つ上のディレクトリを指します。"
                    ],
                    "ordered": false
                },
                {
                    "type": "code",
                    "language": "plaintext",
                    "content": "../pictures/photo.jpg"
                },
                {
                    "type": "p",
                    "paragraphs": [
                        "これは、1つ上のディレクトリにある「pictures」フォルダの中の「photo.jpg」というファイルを示しています。"
                    ]
                }
            ],
            "id": 3
        },
        {
            "title": "4. ファイルの保存と読み込み",
            "type": "p",
            "content": [
                {
                    "type": "p",
                    "paragraphs": [
                        "プログラムを作成したら、ファイルを適切な形式で保存し、それを後から読み込む必要があります。特に、プログラムの変更を元に戻せるようにバージョン管理やバックアップを定期的に行うことが大切です。"
                    ]
                }
            ],
            "id": 4
        },
        {
            "title": "5. 圧縮（Compression）",
            "content": [
                {
                    "type": "p",
                    "paragraphs": [
                        "圧縮は、ファイルサイズを小さくするための技術であると同時に、複数のファイルやフォルダを1つのファイルにまとめる役割も果たします。以下に、圧縮の基本的な概念と、ZIP形式などの具体的な例を交えながら説明します。",
                        "圧縮は、データの冗長性を削減して、ファイルのサイズを小さくするプロセスです。これにより、ストレージの節約やファイル転送の高速化が実現できます。圧縮には主に2つの種類があります。"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        {
                            "text": "可逆圧縮（Lossless Compression）",
                            "details": "可逆圧縮は、データを圧縮しても、元のファイルを完全に復元できる方法です。テキストファイルやプログラムなど、データの正確性が重要な場合に使われます。ZIPやPNGファイルの圧縮はこのタイプです。"
                        },
                        {
                            "text": "非可逆圧縮（Lossy Compression）",
                            "details": "非可逆圧縮は、データの一部を削減することで、ファイルサイズを大幅に小さくしますが、元のファイルを完全には復元できません。主に画像や音声ファイル（JPEG、MP3など）の圧縮に使われ、データの正確さよりもファイルサイズの削減が重要な場合に用いられます。"
                        }
                    ],
                    "ordered": false
                },
                {
                    "type": "p",
                    "paragraphs": [
                        "注：圧縮とアーカイブ（Archive）：圧縮とアーカイブは関連しているものの、異なる概念です。圧縮は、ファイルサイズを小さくするプロセスで、ファイルそのものの内容を小さくします。1つのファイルだけを圧縮することも可能です。アーカイブは、複数のファイルやディレクトリを1つのファイルにまとめるプロセスで、サイズを小さくすることが主な目的ではありません。アーカイブすることで、複数のファイルを1つの単位として扱いやすくなります。tarコマンド（Linuxでよく使われる）は、複数のファイルを1つのアーカイブファイルにまとめますが、圧縮は行いません。tar.gzは、このアーカイブファイルをさらに圧縮したものです。"
                    ],
                    "attributes": {
                        "class": "left"
                    }
                }
            ],
            "id": 5
        },
        {
            "title": "6. 関連用語の整理",
            "content": [
                {
                    "type": "p",
                    "paragraphs":[
                        "プログラミングを始める際に出てくる基本的な用語を以下にまとめます。"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        {
                            "text": "OS",
                            "details": "オペレーティングシステム。パソコンを操作するための基本ソフトウェア",
                            "sample": "Windows, macOS, Linux"
                        },
                        {
                            "text": "ブラウザ",
                            "details": "Webページを閲覧するためのソフトウェア。",
                            "sample": "Google Chrome, Firefox, Safari"
                        },
                        {
                            "text": "ソフトウェア",
                            "details": "プログラムやアプリケーションを指します。コンピュータで特定の機能を実行するためのものです。"
                        },
                        {
                            "text": "ハードウェア",
                            "details": "コンピュータ本体やキーボード、モニタ、マウスなど、物理的な装置を指します。"
                        },
                        {
                            "text": "インターフェース",
                            "details": "入力用のキーボード、マウス、出力用のディスプレイやプリンターのことを指します。"
                        },
                        {
                            "text": "拡張子（Extension）",
                            "details": "そのファイルがどの形式で保存されているかを示すものです。例えば、テキストファイルは\".txt\"、HTMLファイルは\".html\"という拡張子がつきます。拡張子は、ファイルがどのアプリケーションで開かれるべきかを決定する重要な情報です。",
                            "sample": "主な拡張子：.docx, .pptx, .xlsx, .txt, .csv, .png, .jpg, .html, .css, .js, .zipなど。"
                        },
                        {
                            "text": "エンコード",
                            "details": "データを別の形式に変換し、保存や転送、処理を効率化するためのプロセスです。文字のエンコードとは、文字データをコンピュータが扱える形式（バイト）に変換するプロセスです。これにより、テキストデータを保存したり転送したりすることが可能になります。文字エンコードは、文字を一定の規則に基づいてデジタルな数値データに変換する方法であり、異なるシステム間で正しく情報を共有するために重要です。",
                            "sample": "代表的なエンコード: ASCII、UTF-8、Shift_JISなど。"
                        }
                    ],
                    "ordered": false
                }
            ]
        }
    ]
}